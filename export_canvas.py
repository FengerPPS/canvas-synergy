# Generated by Selenium IDE
from multiprocessing import set_forkserver_preload
import time
import glob
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class ExportGB():
  def setup_method(self, method):

    cwd = os.getcwd()
    chromeOptions = webdriver.ChromeOptions()
    prefs = {"download.default_directory" : cwd + "\\"}
    #prefs = {"download.default_directory" : "G:\My Drive\IT\Grade Sync\\"}    
    chromeOptions.add_experimental_option("prefs",prefs)

    self.driver = webdriver.Chrome(options=chromeOptions)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  def getcsvfilename(self, searchstring):
      csvfilename = ""
      for f in glob.glob('*' + searchstring + '*.csv'):
          csvfilename = f
      if not (searchstring in csvfilename):
          csvfilename = ""
      return csvfilename

  def is_file_downloaded(self,coursecode, timeout=30):
    end_time = time.time() + timeout
    filename = ""
    print("Waiting for download to complete")
    while filename == "":
        filename = self.getcsvfilename(coursecode)
        time.sleep(1)
        print(".")
        if time.time() > end_time:
            print("File not downloaded within time")
            return False
    print("Downloaded!")


  def save_export(self, coursecode):
    print("Waiting for page to load")
    for n in range(5,0,-1):
      print(".")
      time.sleep(1)
    
    
    self.driver.find_element(By.XPATH, "//div[@id=\'gradebook-toolbar\']/div/span[3]/span/button").click()
    self.driver.find_element(By.XPATH, "//span[2]/ul/li[2]/span").click()
    print("Export Initiated!")
    self.is_file_downloaded(coursecode)




  def export_canvas(self):
    self.driver.set_window_size(1366, 768)


    self.driver.get("https://lms.pps.net/login/ldap")
    self.driver.find_element(By.ID, "pseudonym_session_unique_id").click()
    self.driver.find_element(By.CSS_SELECTOR, ".ic-Login").click()
    self.driver.find_element(By.ID, "pseudonym_session_unique_id").send_keys("nfenger")
    self.driver.find_element(By.ID, "pseudonym_session_password").click()
    self.driver.find_element(By.ID, "pseudonym_session_password").send_keys("Ka3lpi51605255!&")
    self.driver.find_element(By.ID, "pseudonym_session_password").send_keys(Keys.ENTER)
    #self.driver.find_element(By.CSS_SELECTOR, ".ic-Login").click()
    #self.driver.find_element(By.CSS_SELECTOR, ".Button:nth-child(1)").click()

    """     self.driver.get("https://lms.pps.net/courses/79794/gradebook")
    self.save_export("1627RT1")
    
    self.driver.get("https://lms.pps.net/courses/64271/gradebook")
    self.save_export("1626RA1")
    """ 
    self.driver.get("https://lms.pps.net/courses/64481/gradebook")
    self.save_export("1695A1") 

    """
    self.driver.get("https://lms.pps.net/courses/80428/gradebook")
    self.save_export("1695B1")

    self.driver.get("https://lms.pps.net/courses/80432/gradebook")
    self.save_export("1695C1") 
    """



testClass = ExportGB()  
testClass.setup_method("")
testClass.export_canvas()
testClass.teardown_method("")
